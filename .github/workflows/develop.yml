name: Deploy to master

on:
  push:
    branches: [ master ]

env:
  AWS_REGION: ap-northeast-1

jobs:
  depeloy:
    name: Deploy to todolist-gRPC service
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Get custom info
      id: custome-var
      run: |
        git fetch --prune --unshallow --tags
        echo "short-sha=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT
        echo "tag-name=$(git describe --tags `git rev-list --tags --max-count=1` | cut -c 2-)" >> $GITHUB_OUTPUT
        echo "build-time=$(TZ=Asia/Taipei date +'%Y-%m-%dT%H:%M:%S%z')" >> $GITHUB_OUTPUT
        echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Load secrets and save to app.env
      run: aws secretsmanager get-secret-value --secret-id simple_bank --query SecretString --output text | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > app.env

    - name: Build, tag, and push docker image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: go-todolist-grpc
        IMAGE_TAG: ${{ github.sha }}
        BUILD_VERSION: ${{ steps.custome-var.outputs.tag-name }}
        COMMIT_HASH: ${{ steps.custome-var.outputs.short-sha }}
        BUILD_TIME: ${{ steps.custome-var.outputs.build-time }}
        BRANCH: ${{ steps.custome-var.outputs.branch }}
      run: |
        docker build \
          --build-arg BUILD_VERSION="$BUILD_VERSION" \
          --build-arg COMMIT_HASH="$COMMIT_HASH" \
          --build-arg BUILD_TIME="$BUILD_TIME" \
          --build-arg BRANCH="$BRANCH" \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$BUILD_VERSION" >> $GITHUB_OUTPUT
